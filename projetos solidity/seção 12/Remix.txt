pragma solidity ^0.8.13;

import "@openzeppelin/contracts/access/Ownable.sol";
// no curso ele ensina a usar o safeMath, mas parece que nas novas versoes do solidity nao é mais necessario usar o safemath
contract Allowance is Ownable {
    constructor() Ownable(msg.sender) {}
    // indexed serve para facilitar a busca por esses dados que foram marcados como tal
    event AllowanceChanged(address indexed _quemFoiAdicionado, address indexed _quemAdicionou, uint _oldAmount, uint _newAmount);
    event Withdrawal(address indexed _quemSacou, address indexed _paraOndeFoi, uint _quantia);
    event Deposit(address indexed _deQuem, uint _quantia);

    mapping(address => uint) public allowance;

    // verificar se é o dono ou se tem permissao
    modifier allowed(uint _amount) {
        require(msg.sender == owner() || allowance[msg.sender] >= _amount, "Voce nao tem permissao");
        _;
    }

    // Função para adicionar uma permissão de valor
    function addAllowance(address _who, uint _amount) public onlyOwner {
        emit AllowanceChanged(_who, msg.sender, allowance[_who], _amount);
        allowance[_who] = _amount;
    }
}

contract SimpleWallet is Allowance {

    // funcao de  saque
    function withdrawMoney(address payable _to, uint _amount) public allowed(_amount) {
        require(address(this).balance >= _amount, "Saldo insuficiente no contrato");

        // caso nao seja o dono a sacar, deduzir do valor de quem está sacando
        if (msg.sender != owner()) {
            allowance[msg.sender] -= _amount;
        }

        _to.transfer(_amount);
        emit Withdrawal(msg.sender, _to, _amount);
    }
    function renounceOwnership() public override onlyOwner {
          revert("Nao e possivel renunciar esse contrato!!");
    }

    // Função receive para aceitar pagamentos simples de ether
    receive() external payable {
        emit Deposit(msg.sender, msg.value);
    }

    // Função fallback para chamada de funções inexistentes ou quando ether é enviado com dados
    fallback() external payable {
        emit Deposit(msg.sender, msg.value);
    }
}
